diff -rupNEZbB files-original/usr/src/minix/include/minix/callnr.h files-modified/usr/src/minix/include/minix/callnr.h
--- files-original/usr/src/minix/include/minix/callnr.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/include/minix/callnr.h	2023-06-18 23:16:47.319645194 +0200
@@ -118,7 +118,9 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_EXCLUSIVE		(VFS_BASE + 49)
+#define VFS_FEXCLUSIVE		(VFS_BASE + 50)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		51	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff -rupNEZbB files-original/usr/src/minix/include/minix/ipc.h files-modified/usr/src/minix/include/minix/ipc.h
--- files-original/usr/src/minix/include/minix/ipc.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/include/minix/ipc.h	2023-06-18 23:16:47.329645194 +0200
@@ -842,6 +842,16 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
 typedef struct {
+	int fd;
+	vir_bytes name;
+	size_t len;
+	int flags;
+
+	uint8_t padding[40];
+} mess_lc_vfs_exclusive;
+_ASSERT_MSG_SIZE(mess_lc_vfs_exclusive);
+
+typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
 } mess_lc_vm_brk;
@@ -2121,6 +2131,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_exclusive	m_lc_vfs_exclusive;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/Makefile files-modified/usr/src/minix/servers/vfs/Makefile
--- files-original/usr/src/minix/servers/vfs/Makefile	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/Makefile	2023-06-18 23:16:47.309645198 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	exclusive.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/const.h files-modified/usr/src/minix/servers/vfs/const.h
--- files-original/usr/src/minix/servers/vfs/const.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/const.h	2023-06-18 23:16:47.289645196 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_EXCLUSIVE	8	/* # slots in the exclusive locking table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/exclusive.c files-modified/usr/src/minix/servers/vfs/exclusive.c
--- files-original/usr/src/minix/servers/vfs/exclusive.c	1970-01-01 01:00:00.000000000 +0100
+++ files-modified/usr/src/minix/servers/vfs/exclusive.c	2023-06-18 23:16:47.239645198 +0200
@@ -0,0 +1,308 @@
+#include "fs.h"
+#include <fcntl.h>
+#include <minix/callnr.h>
+#include <minix/vfsif.h>
+#include "vnode.h"
+#include "vmnt.h"
+#include "file.h"
+#include "path.h"
+
+static void free_exclusive_block(struct exclusive_block *exclusive_block) {
+	exclusive_block->blocked_uid = 0;
+	exclusive_block->fd = -1;
+	exclusive_block->inode = -1;
+	exclusive_block->owner = 0;
+	exclusive_block->pid = 0;
+}
+
+static void set_exclusive_block(struct exclusive_block *exclusive_block, ino_t inode, uid_t owner, int fd) {
+	exclusive_block->blocked_uid = fp->fp_realuid;
+	exclusive_block->fd = fd;
+	exclusive_block->inode = inode;
+	exclusive_block->owner = owner;
+	exclusive_block->pid = fp->fp_pid;
+}
+
+static int find_free_slot(void) {
+	for (int i = 0; i < NR_EXCLUSIVE; i++) {
+		if (block_table[i].inode == -1)
+			return i;
+	}
+	return -1;
+}
+
+static int find_block_slot(ino_t inode) {
+	for (int i = 0; i < NR_EXCLUSIVE; i++) {
+		if(block_table[i].inode != -1) {
+			if (block_table[i].inode == inode)
+				return i;
+		}
+	}
+	return -1;
+}
+
+static int lock_excl(int fd, ino_t inode, uid_t owner) {
+	int idx = find_block_slot(inode);
+	if (idx != -1) {
+		return EALREADY;
+	}
+	int index = find_free_slot();
+	if (index == -1) {
+		return ENOLCK;
+	}
+	set_exclusive_block(block_table + index, inode, owner, fd);
+	return 0;
+}
+
+static int unlock_excl(ino_t inode, int force_flag) {
+	int index = find_block_slot(inode);
+	if (index == -1) {
+		return EINVAL;
+	}
+	if(force_flag == 1) {
+		if(fp->fp_realuid != SU_UID && fp->fp_realuid != block_table[index].owner 
+			&& fp->fp_realuid != block_table[index].blocked_uid)
+			return EPERM;
+	}
+	else {
+		if (fp->fp_realuid != block_table[index].blocked_uid)
+			return EPERM;
+	}
+	free_exclusive_block(block_table + index);
+	return 0;
+}
+
+static int check_no_others(ino_t inode) {
+	uid_t user = fp->fp_realuid;
+
+	for(int i = 0; i < NR_PROCS; i++) {
+		if (fproc[i].fp_realuid != user) {
+			for(int j = 0; j < OPEN_MAX; j++) {
+				if (fproc[i].fp_filp[j] != NULL && fproc[i].fp_filp[j]->filp_vno != NULL 
+					&& fproc[i].fp_filp[j]->filp_vno->v_inode_nr == inode) {	
+					return 1;
+				}
+			}
+		}
+	}
+
+	return 0;
+}
+
+static int inode_from_name(vir_bytes name, size_t size, ino_t *ino, uid_t *owner) {
+	int r;
+	struct vnode *vp;
+	struct vmnt *vmp;
+	struct lookup resolve;
+	char fullpath[PATH_MAX];
+
+	lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp, &vp);
+	resolve.l_vmnt_lock = VMNT_WRITE;
+	resolve.l_vnode_lock = VNODE_WRITE;
+
+	if (size > sizeof(fullpath))
+		return ENAMETOOLONG;
+
+	if (fetch_name(name, size, fullpath) != OK)
+		return(err_code);
+
+	if ((vp = eat_path(&resolve, fp)) == NULL)
+		return(err_code);
+
+	r = read_only(vp);
+
+	if (r == OK && !S_ISREG(vp->v_mode))
+		r = EFTYPE;
+	
+	if (r == OK && forbidden(fp, vp, R_BIT) != OK && forbidden(fp, vp, W_BIT) != OK)
+		r = EACCES;
+
+	if (r == OK) {
+		if (ino != NULL)
+			*ino = vp->v_inode_nr;
+		if (owner != NULL)
+			*owner = vp->v_uid;
+	}
+
+	unlock_vnode(vp);
+	unlock_vmnt(vmp);
+	put_vnode(vp);
+	return(r);
+}
+
+int check_excl_block(ino_t inode) {
+	int index = find_block_slot(inode);
+	if (index == -1)
+		return 0;
+	if (block_table[index].blocked_uid != fp->fp_realuid)
+		return -1;
+	return 0;
+}
+
+void remove_excl_fd(int fd, ino_t inode, struct fproc *rfp) {
+	for (int i = 0; i < NR_EXCLUSIVE; i++) {
+		if (block_table[i].fd == fd && block_table[i].inode == inode && block_table[i].pid == rfp->fp_pid)
+			free_exclusive_block(block_table + i);
+	}
+}
+
+int check_inode_by_name(vir_bytes name, size_t size) {
+	struct vnode *vp;
+	struct vmnt *vmp;
+	struct lookup resolve;
+	char fullpath[PATH_MAX];
+
+	lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp, &vp);
+	resolve.l_vmnt_lock = VMNT_WRITE;
+	resolve.l_vnode_lock = VNODE_WRITE;
+
+	if (size > sizeof(fullpath))
+		return 0;
+
+	if (fetch_name(name, size, fullpath) != OK)
+		return 0;
+
+	if ((vp = eat_path(&resolve, fp)) == NULL)
+		return 0;
+
+	int index = find_block_slot(vp->v_inode_nr);
+
+	int r = 0;
+	if (block_table[index].blocked_uid != fp->fp_realuid)
+		r = 1;
+
+	unlock_vnode(vp);
+	unlock_vmnt(vmp);
+	put_vnode(vp);
+	return(r);
+}
+
+static int get_index_by_name(vir_bytes name, size_t size) {
+	struct vnode *vp;
+	struct vmnt *vmp;
+	struct lookup resolve;
+	char fullpath[PATH_MAX];
+
+	lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp, &vp);
+	resolve.l_vmnt_lock = VMNT_WRITE;
+	resolve.l_vnode_lock = VNODE_WRITE;
+
+	if (size > sizeof(fullpath))
+		return -1;
+
+	if (fetch_name(name, size, fullpath) != OK)
+		return -1;
+
+	if ((vp = eat_path(&resolve, fp)) == NULL)
+		return -1;
+
+	int index = find_block_slot(vp->v_inode_nr);
+
+	unlock_vnode(vp);
+	unlock_vmnt(vmp);
+	put_vnode(vp);
+	return(index);
+}
+
+void set_inode_close_flag(vir_bytes name, size_t size) {
+	int index = get_index_by_name(name, size);
+	if (index != -1 && block_table[index].fd == -1)
+		block_table[index].fd = -2;
+}
+
+static void close_inode_flag() {
+	for (int i = 0; i < NR_EXCLUSIVE; i++) {
+		if (block_table[i].inode != -1) {
+			if (block_table[i].fd == -2 && check_no_others(block_table[i].inode) != 1)
+				free_exclusive_block(block_table + i); 
+		}
+	}
+}
+
+int do_exclusive(void) {
+	int r, excl_err;
+	ino_t inode;
+	uid_t owner;
+
+	int flags = job_m_in.m_lc_vfs_exclusive.flags;
+	vir_bytes name = job_m_in.m_lc_vfs_exclusive.name;
+	size_t len = job_m_in.m_lc_vfs_exclusive.len;
+
+	if((r = inode_from_name(name, len, &inode, &owner)) != OK)
+		return(r);
+
+	close_inode_flag();
+
+	if (flags == EXCL_LOCK) {
+		excl_err = lock_excl(-1, inode, owner);
+		return excl_err;
+	}
+	else if (flags == EXCL_LOCK_NO_OTHERS) {
+		if (check_no_others(inode) == 1)
+			return EAGAIN;
+		excl_err = lock_excl(-1, inode, owner);
+		return excl_err;
+	} 
+	else if (flags == EXCL_UNLOCK) {
+		excl_err = unlock_excl(inode, 0);
+		return excl_err;
+	}
+	else if (flags == EXCL_UNLOCK_FORCE) {
+		excl_err = unlock_excl(inode, 1);
+		return excl_err;
+	}
+	return EINVAL;
+}
+
+int do_fexclusive(void) {
+	int fexcl_err;
+	struct filp *flp;
+	ino_t inode;
+	uid_t owner;
+
+	int flags = job_m_in.m_lc_vfs_exclusive.flags;
+	int fd = job_m_in.m_lc_vfs_exclusive.fd;
+
+	flp = NULL;
+
+	if ((flp = get_filp(fd, VNODE_WRITE)) == NULL)
+		return(err_code);
+
+	if(!((flp->filp_mode) & (R_BIT | W_BIT))) {
+		unlock_filp(flp);
+		return EBADF;
+	}
+
+	inode = flp->filp_vno->v_inode_nr;
+	owner = flp->filp_vno->v_uid;
+
+	close_inode_flag();
+
+	if (flags == EXCL_LOCK) {
+		fexcl_err = lock_excl(fd, inode, owner);
+		unlock_filp(flp);
+		return fexcl_err;
+	}
+	else if (flags == EXCL_LOCK_NO_OTHERS) {
+		if (check_no_others(inode) == 1) {
+			unlock_filp(flp);
+			return EAGAIN;
+		}
+		fexcl_err = lock_excl(fd, inode, owner);
+		unlock_filp(flp);
+		return fexcl_err;
+	} 
+	else if (flags == EXCL_UNLOCK) {
+		fexcl_err = unlock_excl(inode, 0);
+		unlock_filp(flp);
+		return fexcl_err;
+	}
+	else if (flags == EXCL_UNLOCK_FORCE) {
+		fexcl_err = unlock_excl(inode, 1);
+		unlock_filp(flp);
+		return fexcl_err;
+	}
+
+	unlock_filp(flp);
+	return EINVAL;
+}
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/exclusive.h files-modified/usr/src/minix/servers/vfs/exclusive.h
--- files-original/usr/src/minix/servers/vfs/exclusive.h	1970-01-01 01:00:00.000000000 +0100
+++ files-modified/usr/src/minix/servers/vfs/exclusive.h	2023-06-18 23:16:47.289645196 +0200
@@ -0,0 +1,12 @@
+#ifndef _VFS_EXCLUSIVE_H_
+#define _VFS_EXCLUSIVE_H_
+
+EXTERN struct exclusive_block {
+    ino_t inode;
+    uid_t owner;
+    uid_t blocked_uid;
+    int fd;
+    pid_t pid;
+} block_table[NR_EXCLUSIVE];
+
+#endif /* _VFS_EXCLUSIVE_H_ */
\ No newline at end of file
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/fs.h files-modified/usr/src/minix/servers/vfs/fs.h
--- files-original/usr/src/minix/servers/vfs/fs.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/fs.h	2023-06-18 23:16:47.289645196 +0200
@@ -35,5 +35,6 @@
 #include "type.h"
 #include "vmnt.h"
 #include "fproc.h"
+#include "exclusive.h"
 
 #endif
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/link.c files-modified/usr/src/minix/servers/vfs/link.c
--- files-original/usr/src/minix/servers/vfs/link.c	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/link.c	2023-06-18 23:16:47.239645198 +0200
@@ -102,6 +102,11 @@ int do_unlink(void)
   char fullpath[PATH_MAX];
   struct lookup resolve, stickycheck;
 
+  if(check_inode_by_name(job_m_in.m_lc_vfs_path.name, job_m_in.m_lc_vfs_path.len))
+    return EACCES;
+
+  set_inode_close_flag(job_m_in.m_lc_vfs_path.name, job_m_in.m_lc_vfs_path.len);
+
   if (copy_path(fullpath, sizeof(fullpath)) != OK)
 	return(err_code);
 
@@ -184,6 +189,13 @@ int do_rename(void)
   vname2 = job_m_in.m_lc_vfs_link.name2;
   vname2_length = job_m_in.m_lc_vfs_link.len2;
 
+  if(check_inode_by_name(vname1, vname1_length))
+    return EACCES;
+  if(check_inode_by_name(vname2, vname2_length))
+    return EACCES;
+
+  set_inode_close_flag(vname2, vname2_length);
+
   lookup_init(&resolve, fullpath, PATH_RET_SYMLINK, &oldvmp, &old_dirp);
   /* Do not yet request exclusive lock on vmnt to prevent deadlocks later on */
   resolve.l_vmnt_lock = VMNT_WRITE;
@@ -373,6 +385,10 @@ off_t newsize;
   assert(tll_locked_by_me(&vp->v_lock));
   if (!S_ISREG(vp->v_mode) && !S_ISFIFO(vp->v_mode)) return(EINVAL);
 
+  int check_excl_err = check_excl_block(vp->v_inode_nr);
+  if (check_excl_err == -1)
+	  return EACCES;
+
   /* We must not compare the old and the new size here: this function may be
    * called for open(2), which requires an update to the file times if O_TRUNC
    * is given, even if the file size remains the same.
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/main.c files-modified/usr/src/minix/servers/vfs/main.c
--- files-original/usr/src/minix/servers/vfs/main.c	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/main.c	2023-06-18 23:16:47.249645200 +0200
@@ -59,6 +59,10 @@ int main(void)
  * three major activities: getting new work, processing the work, and sending
  * the reply.  This loop never terminates as long as the file system runs.
  */
+  for (int i = 0; i < NR_EXCLUSIVE; i++) {
+	block_table[i].inode = -1;
+	block_table[i].fd = -1;
+  }
   int transid;
   struct worker_thread *wp;
 
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/open.c files-modified/usr/src/minix/servers/vfs/open.c
--- files-original/usr/src/minix/servers/vfs/open.c	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/open.c	2023-06-18 23:16:47.249645200 +0200
@@ -130,7 +130,13 @@ int common_open(char path[PATH_MAX], int
 
 	if (vmp != NULL) unlock_vmnt(vmp);
   }
-
+  int check_excl_err = check_excl_block(vp->v_inode_nr);
+  if (check_excl_err == -1) {
+	unlock_filp(filp);
+	unlock_vnode(vp);
+	put_vnode(vp);
+	return EACCES;
+  }
   /* Claim the file descriptor and filp slot and fill them in. */
   fp->fp_filp[scratch(fp).file.fd_nr] = filp;
   filp->filp_count = 1;
@@ -686,6 +692,8 @@ int fd_nr;
 
   vp = rfilp->filp_vno;
 
+  remove_excl_fd(fd_nr, vp->v_inode_nr, rfp);
+
   /* first, make all future get_filp2()'s fail; otherwise
    * we might try to close the same fd in different threads
    */
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/proto.h files-modified/usr/src/minix/servers/vfs/proto.h
--- files-original/usr/src/minix/servers/vfs/proto.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/proto.h	2023-06-18 23:16:47.299645196 +0200
@@ -348,4 +348,13 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* exclusive.c */
+int do_exclusive(void);
+int do_fexclusive(void);
+int check_excl_block(ino_t inode);
+void remove_excl_fd(int fd, ino_t inode, struct fproc *rfp);
+int check_inode_by_name(vir_bytes name, size_t size);
+void set_inode_close_flag(vir_bytes name, size_t size);
+
 #endif
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/read.c files-modified/usr/src/minix/servers/vfs/read.c
--- files-original/usr/src/minix/servers/vfs/read.c	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/read.c	2023-06-18 23:16:47.259645196 +0200
@@ -147,6 +147,10 @@ int read_write(struct fproc *rfp, int rw
 
   if (size > SSIZE_MAX) return(EINVAL);
 
+  int check_excl_err = check_excl_block(vp->v_inode_nr);
+  if (check_excl_err == -1)
+	return EACCES;
+
   op = (rw_flag == READING ? CDEV_READ : CDEV_WRITE);
 
   if (S_ISFIFO(vp->v_mode)) {		/* Pipes */
diff -rupNEZbB files-original/usr/src/minix/servers/vfs/table.c files-modified/usr/src/minix/servers/vfs/table.c
--- files-original/usr/src/minix/servers/vfs/table.c	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/minix/servers/vfs/table.c	2023-06-18 23:16:47.269645196 +0200
@@ -65,4 +65,6 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_EXCLUSIVE)	= do_exclusive,		/* exclusive() */
+	CALL(VFS_FEXCLUSIVE)	= do_fexclusive,	/* fexclusive() */
 };
diff -rupNEZbB files-original/usr/src/sys/sys/fcntl.h files-modified/usr/src/sys/sys/fcntl.h
--- files-original/usr/src/sys/sys/fcntl.h	2023-06-18 19:00:37.580829701 +0200
+++ files-modified/usr/src/sys/sys/fcntl.h	2023-06-18 23:16:47.319645194 +0200
@@ -301,6 +301,13 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Constants for exclusive lock.
+ */
+#define EXCL_UNLOCK				1	/* Unlock. */
+#define EXCL_UNLOCK_FORCE		2	/* Forced unlock by privileged users. */
+#define EXCL_LOCK				4	/* Lock unconditionally. */
+#define EXCL_LOCK_NO_OTHERS		8	/* Lock if no other users have this file opened. */
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>
